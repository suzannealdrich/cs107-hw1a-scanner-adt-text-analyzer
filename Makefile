#### Makefile for CS107 hw1a### Set the compiler to be a known ANSI compliant one# Actually go back a version and use 2.7.2 instead of 2.8# since it plays better with PurifyCC = /usr/pubsw/package/Development/gcc2.7.2.2/@sys/bin/gcc## adding the '-DNDEBUG' defines the CT symbol NDEBUG which## suppresses all the asserts and what not. You'd do that for## a production build, but it is a good idea to leave it in## for the purposes of this class.DFLAG = ## -DNDEBUG## the -I allows you to include any local header files for our## class libraries.  The define of __USE_FIXED_PROTOTYPES__ is## essential for convincing the compiler to use the ANSI## header files (i.e. with proper prototypes) that ship with gccCFLAGS = -g -Wall $(DFLAG) -I/usr/class/cs107/include \         -D__USE_FIXED_PROTOTYPES__LDFLAGS = -g TARGET = analyzedefault : $(TARGET) HDRS =  scanner.hSRCS =  scanner.c analyze.cOBJS = $(SRCS:.c=.o)PROGS = analyzepure : analyze.purifyanalyze : $(OBJS)	$(CC) $(OBJS) $(LDFLAGS) -o analyzeanalyze.purify :  $(OBJS)	purify -log-file=purify.log $(CC)  -o $@ $(OBJS)   $(LDFLAGS)# The dependencies below make use of make's default rules,# under which a .o automatically depends on its .c and# the action taken uses the $(CC) and $(CFLAGS) variables.# These lines describe a few extra dependencies involved.scanner.o : scanner.hanalyze.o : scanner.hclean : 	/bin/rm -f *.o a.out core $(PROGS) *.purify purify.logTAGS : $(SRCS) $(HDRS)	etags -t $(SRCS) $(HDRS)